【日報】4/20（木）
# 本日の目標（TODO目標/できるようになりたいこと）
	チェリー本を読み飛ばさずに手を動かしながら読む。p.50〜206
# 学習時間（Hour）
	5h
# 目標振り返り（TODO進捗/できるようになりたいこと振り返り）
	チェリー本を読み飛ばさずに手を動かしながら読む。p.50〜130
	目標に届かなかった。
# 詰まっていること（実現したいこと/現状/行ったこと/仮説）
	特になし。
# 学んだこと（新しい気付き、学び）
	文字列
	・%記法 %q!〜! = '〜'  /   %Q!〜!  ,  %!〜! = "〜"
	・ヒアドキュメントの様々な記述 <<識別子(大文字) 〜 識別子
	・sprintfによるフォーマット指定 sprintf('%0.3', 1.2) #=> "1.200"

	数値
	・基数指示子 2進数:0b 8進数:0または0o 16進数:0x
	・「2×10?3乗」-> 2e-3
	・複素数リテラル 0.3 - 0.5i / '0.3 - 0.5'.to_c

	・短絡評価が理解できなかった…が、不思議と日報に仮説を書いていたら徐々に理解できた。
	※前提: falseとnilは偽であり、それ以外は真である。
	短絡評価とは、式全体が真または偽であることが決定するまで左の条件式から順番に評価し、式全体の真偽値が確定した時点で評価を終了する。そして、最初に判定結果が確定した値を返す評価法である。
	・真偽値の優先順位 （高い）!     &&     ||    not    and, or （低い）
	・述語メソッド ?で終わるメソッドのこと。慣習として真偽値を返すメソッドになっている。
		真偽値を返す目的のメソッドを自分で作成した場合も、?で終わる命名がよい。
	・!で終わるメソッド = 危険なメソッド
	・エンドレスメソッド endを省略した簡略な表記が可能。Ruby3.0以降。（実験的機能であるため注意）
	・参照の概念 Rubyの変数にはオブジェクトそのものではなく、参照（object_id）が格納されている。参照の理解は、バグを防ぐためにも大切である。
	・自作プログラムの読み込みは require_relativeを使う。

	配列、繰り返し処理
	・配列名.delete_at(添え字) 添え字の要素を指定して削除。
	・配列の多重代入 quo_rem = 14.divmod(3)	#=> [4, 2] 戻り値を配列のまま変数へ格納
	・Rubyプログラムではfor文を書かない。 配列に対してeachメソッド (「繰り返せ」という命令)でブロック(do〜endや{})内に要素を渡して処理し、最後に評価された式が戻り値となる。
	・mapメソッド 繰り返し処理をさせた結果を配列に入れるときに便利。
	・sumメソッド 文字列の連結に使えるのは盲点。

	テスト Minitestの基本
	・「プログラムのインプットとアウトプットが明確」かつ「テストコードの書き方が最初からイメージできる」の場合、テスト駆動開発 (TDD) が向いている。
	テストファースト
		・先にテストを書いて失敗させる
		・テストがパスする最小限のコードを書いて確認。=> "Fake It" 疎通確認
		・リファクタリングする。
	
# 感想（一日の感想、雑談）
	本を読み飛ばさずに読むことの大切さを感じている。明日も引き続き継続。

# 明日の目標（TODO目標/できるようになりたいこと）
	チェリー本を読み飛ばさずに手を動かしながら読む。p.131〜206